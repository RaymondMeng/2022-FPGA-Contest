   1              	# 1 "../src/start.S"
   1              	/*
   0              	
   0              	
   0              	
   2              	 *****************************************************************************************
   3              	 *
   4              	 * 		Copyright (C) 2014-2022 Gowin Semiconductor Technology Co.,Ltd.
   5              	 *
   6              	 * @file		start.S
   7              	 * @author		Embedded Development Team
   8              	 * @version		V1.2.x
   9              	 * @date		2022-01-01 09:00:00
  10              	 * @brief		Startup
  11              	 ******************************************************************************************
  12              	 */
  13              	 
  14              	#include "custom_ops.S"
   1              	/*
   2              	 ******************************************************************************************
   3              	 *
   4              	 * 		Copyright (C) 2014-2022 Gowin Semiconductor Technology Co.,Ltd.
   5              	 *
   6              	 * @file		custom_ops.S
   7              	 * @author		Embedded Development Team
   8              	 * @version		V1.2.x
   9              	 * @date		2022-01-01 09:00:00
  10              	 * @brief		custom options for user-defined instructions
  11              	 *******************************************************************************************
  12              	 */
  13              	
  14              	/*
  15              	 * for user-defined instructions
  16              	 *
  17              	 */
  18              	#define regnum_q0   0
  19              	#define regnum_q1   1
  20              	#define regnum_q2   2
  21              	#define regnum_q3   3
  22              	
  23              	#define regnum_x0   0
  24              	#define regnum_x1   1
  25              	#define regnum_x2   2
  26              	#define regnum_x3   3
  27              	#define regnum_x4   4
  28              	#define regnum_x5   5
  29              	#define regnum_x6   6
  30              	#define regnum_x7   7
  31              	#define regnum_x8   8
  32              	#define regnum_x9   9
  33              	#define regnum_x10 10
  34              	#define regnum_x11 11
  35              	#define regnum_x12 12
  36              	#define regnum_x13 13
  37              	#define regnum_x14 14
  38              	#define regnum_x15 15
  39              	#define regnum_x16 16
  40              	#define regnum_x17 17
  41              	#define regnum_x18 18
  42              	#define regnum_x19 19
  43              	#define regnum_x20 20
  44              	#define regnum_x21 21
  45              	#define regnum_x22 22
  46              	#define regnum_x23 23
  47              	#define regnum_x24 24
  48              	#define regnum_x25 25
  49              	#define regnum_x26 26
  50              	#define regnum_x27 27
  51              	#define regnum_x28 28
  52              	#define regnum_x29 29
  53              	#define regnum_x30 30
  54              	#define regnum_x31 31
  55              	
  56              	#define regnum_zero 0
  57              	#define regnum_ra   1
  58              	#define regnum_sp   2
  59              	#define regnum_gp   3
  60              	#define regnum_tp   4
  61              	#define regnum_t0   5
  62              	#define regnum_t1   6
  63              	#define regnum_t2   7
  64              	#define regnum_s0   8
  65              	#define regnum_s1   9
  66              	#define regnum_a0  10
  67              	#define regnum_a1  11
  68              	#define regnum_a2  12
  69              	#define regnum_a3  13
  70              	#define regnum_a4  14
  71              	#define regnum_a5  15
  72              	#define regnum_a6  16
  73              	#define regnum_a7  17
  74              	#define regnum_s2  18
  75              	#define regnum_s3  19
  76              	#define regnum_s4  20
  77              	#define regnum_s5  21
  78              	#define regnum_s6  22
  79              	#define regnum_s7  23
  80              	#define regnum_s8  24
  81              	#define regnum_s9  25
  82              	#define regnum_s10 26
  83              	#define regnum_s11 27
  84              	#define regnum_t3  28
  85              	#define regnum_t4  29
  86              	#define regnum_t5  30
  87              	#define regnum_t6  31
  88              	
  89              	// x8 is s0 and also fp
  90              	#define regnum_fp   8
  91              	
  92              	#define r_type_insn(_f7, _rs2, _rs1, _f3, _rd, _opc) \
  93              	.word (((_f7) << 25) | ((_rs2) << 20) | ((_rs1) << 15) | ((_f3) << 12) | ((_rd) << 7) | ((_opc) << 
  94              	
  95              	#define r_type_insn1(_f7, _rs2, _rs1, _f3, _rd, _opc) \
  96              	(((_f7) << 25) | ((_rs2) << 20) | ((_rs1) << 15) | ((_f3) << 12) | ((_rd) << 7) | ((_opc) << 0))
  97              	
  98              	#define picorv32_getq_insn(_rd, _qs) \
  99              	r_type_insn(0b0000000, 0, regnum_ ## _qs, 0b100, regnum_ ## _rd, 0b0001011)
 100              	
 101              	#define picorv32_setq_insn(_qd, _rs) \
 102              	r_type_insn(0b0000001, 0, regnum_ ## _rs, 0b010, regnum_ ## _qd, 0b0001011)
 103              	
 104              	#define picorv32_retirq_insn() \
 105              	r_type_insn(0b0000010, 0, 0, 0b000, 0, 0b0001011)
 106              	
 107              	#define picorv32_retirq_insn1() \
 108              	r_type_insn1(0b0000010, 0, 0, 0b000, 0, 0b0001011)
 109              	
 110              	#define picorv32_maskirq_insn(_rd, _rs) \
 111              	r_type_insn(0b0000011, 0, regnum_ ## _rs, 0b110, regnum_ ## _rd, 0b0001011)
 112              	
 113              	#define picorv32_waitirq_insn(_rd) \
 114              	r_type_insn(0b0000100, 0, 0, 0b100, regnum_ ## _rd, 0b0001011)
 115              	
 116              	#define picorv32_timer_insn(_rd, _rs) \
 117              	r_type_insn(0b0000101, 0, regnum_ ## _rs, 0b110, regnum_ ## _rd, 0b0001011)
  15              	#include "config.h"
   1              	/*
   2              	 * *****************************************************************************************
   3              	 *
   4              	 * 		Copyright (C) 2014-2022 Gowin Semiconductor Technology Co.,Ltd.
   5              	 *
   6              	 * @file		config.h
   7              	 * @author		Embedded Development Team
   8              	 * @version		V1.2.x
   9              	 * @date		2022-01-01 09:00:00
  10              	 * @brief		Configuartion.
  11              	 ******************************************************************************************
  12              	 */
  13              	
  14              	#ifndef CONFIG_H_
  15              	#define CONFIG_H_
  16              	
  17              	//User configures MCU boot mode
  18              	/*
  19              	 * BUILD_LOAD : MCU boot from and run in ITCM
  20              	 *              sections.lds
  21              	 * BUILD_BURN : MCU boot from external flash and run in ITCM
  22              	 *              sections.lds
  23              	 * BUILD_XIP  : MCU boot from and run in external flash
  24              	 *              sections_xip.lds
  25              	 *
  26              	 * */
  27              	#define BUILD_LOAD 0  // MCU boot from and run in ITCM, must use sections.lds as linker script!
  28              	#define BUILD_BURN 1  // MCU boot from external flash and run in ITCM, must use sections.lds as lin
  29              	#define BUILD_XIP  2  // MCU boot from and run in external flash, must use sections_xip.lds as link
  30              	
  31              	#define BUILD_MODE BUILD_LOAD	//must match with hardware ipcore
  32              	
  16              	
  17              	/*
  18              	 * for booting and running in spi-flash
  19              	 */
  20              	#if BUILD_MODE == BUILD_XIP
  21              	#define irq_regs  0x01000000
  22              	#define irq_stack 0x01000280
  23              	#endif
  24              	
  25              		.section .text
  26              		.global irq
  27              	
  28              	reset_vec:
  29              	#no more than 16 bytes here !
  30 0000 81AA     		j start
  31              	
  32              	/********************************** Interrupt handler **********************************/
  33 0002 01001300 	.balign 16
  33      00001300 
  33      00001300 
  33      0000
  34              	irq_vec:
  35              	# save registers
  36 0010 0BA10002 		picorv32_setq_insn(q2, x1)
  37 0014 8B210102 		picorv32_setq_insn(q3, x2)
  38              	
  39 0018 930001F8 		addi x1, x2, -128
  40              	
  41 001c 0BC10100 		picorv32_getq_insn(x2, q3)   //store x2
  42 0020 23A42000 		sw x2,   2*4(x1)
  43 0024 0B410000 		picorv32_getq_insn(x2, q0)   //store q0
  44 0028 23A02000 		sw x2,   0*4(x1)
  45 002c 0B410100 		picorv32_getq_insn(x2, q2)   //store x1
  46 0030 23A22000 		sw x2,   1*4(x1)
  47              	
  48 0034 0681     		mv x2, x1                    //update sp
  49              	
  50 0036 23A63000 		sw x3,   3*4(x1)
  51 003a 23A84000 		sw x4,   4*4(x1)
  52 003e 23AA5000 		sw x5,   5*4(x1)
  53 0042 23AC6000 		sw x6,   6*4(x1)
  54 0046 23AE7000 		sw x7,   7*4(x1)
  55 004a 23A08002 		sw x8,   8*4(x1)
  56 004e 23A29002 		sw x9,   9*4(x1)
  57 0052 23A4A002 		sw x10, 10*4(x1)
  58 0056 23A6B002 		sw x11, 11*4(x1)
  59 005a 23A8C002 		sw x12, 12*4(x1)
  60 005e 23AAD002 		sw x13, 13*4(x1)
  61 0062 23ACE002 		sw x14, 14*4(x1)
  62 0066 23AEF002 		sw x15, 15*4(x1)
  63 006a 23A00005 		sw x16, 16*4(x1)
  64 006e 23A21005 		sw x17, 17*4(x1)
  65 0072 23A42005 		sw x18, 18*4(x1)
  66 0076 23A63005 		sw x19, 19*4(x1)
  67 007a 23A84005 		sw x20, 20*4(x1)
  68 007e 23AA5005 		sw x21, 21*4(x1)
  69 0082 23AC6005 		sw x22, 22*4(x1)
  70 0086 23AE7005 		sw x23, 23*4(x1)
  71 008a 23A08007 		sw x24, 24*4(x1)
  72 008e 23A29007 		sw x25, 25*4(x1)
  73 0092 23A4A007 		sw x26, 26*4(x1)
  74 0096 23A6B007 		sw x27, 27*4(x1)
  75 009a 23A8C007 		sw x28, 28*4(x1)
  76 009e 23AAD007 		sw x29, 29*4(x1)
  77 00a2 23ACE007 		sw x30, 30*4(x1)
  78 00a6 23AEF007 		sw x31, 31*4(x1)
  79              	
  80              	
  81              	# call interrupt handler C function
  82 00aa 0685     		mv a0, x1
  83              	
  84              	# arg1 = interrupt type
  85 00ac 8BC50000 		picorv32_getq_insn(a1, q1)
  86              	
  87              	# call to C function
  88 00b0 EFF01FF5 		jal ra, irq
  89              	
  90              	# restore registers
  91              	# new irq_regs address returned from C code in a0
  92 00b4 93000100 		addi x1, x2, 0
  93              	
  94 00b8 03A10000 		lw x2,   0*4(x1)
  95 00bc 0B200102 		picorv32_setq_insn(q0, x2)
  96              	
  97 00c0 03A14000 		lw x2,   1*4(x1)
  98 00c4 8B200102 		picorv32_setq_insn(q1, x2)
  99              	
 100 00c8 03A18000 		lw x2,   2*4(x1)
 101 00cc 0B210102 		picorv32_setq_insn(q2, x2)
 102              	
 103 00d0 83A1C000 		lw x3,   3*4(x1)
 104 00d4 03A20001 		lw x4,   4*4(x1)
 105 00d8 83A24001 		lw x5,   5*4(x1)
 106 00dc 03A38001 		lw x6,   6*4(x1)
 107 00e0 83A3C001 		lw x7,   7*4(x1)
 108 00e4 03A40002 		lw x8,   8*4(x1)
 109 00e8 83A44002 		lw x9,   9*4(x1)
 110 00ec 03A58002 		lw x10, 10*4(x1)
 111 00f0 83A5C002 		lw x11, 11*4(x1)
 112 00f4 03A60003 		lw x12, 12*4(x1)
 113 00f8 83A64003 		lw x13, 13*4(x1)
 114 00fc 03A78003 		lw x14, 14*4(x1)
 115 0100 83A7C003 		lw x15, 15*4(x1)
 116 0104 03A80004 		lw x16, 16*4(x1)
 117 0108 83A84004 		lw x17, 17*4(x1)
 118 010c 03A98004 		lw x18, 18*4(x1)
 119 0110 83A9C004 		lw x19, 19*4(x1)
 120 0114 03AA0005 		lw x20, 20*4(x1)
 121 0118 83AA4005 		lw x21, 21*4(x1)
 122 011c 03AB8005 		lw x22, 22*4(x1)
 123 0120 83ABC005 		lw x23, 23*4(x1)
 124 0124 03AC0006 		lw x24, 24*4(x1)
 125 0128 83AC4006 		lw x25, 25*4(x1)
 126 012c 03AD8006 		lw x26, 26*4(x1)
 127 0130 83ADC006 		lw x27, 27*4(x1)
 128 0134 03AE0007 		lw x28, 28*4(x1)
 129 0138 83AE4007 		lw x29, 29*4(x1)
 130 013c 03AF8007 		lw x30, 30*4(x1)
 131 0140 83AFC007 		lw x31, 31*4(x1)
 132              	
 133 0144 8BC00000 		picorv32_getq_insn(x1, q1)
 134 0148 0B410100 		picorv32_getq_insn(x2, q2)
 135 014c EFFF5FEB 	    jal t6, return_from_irq
 136              	
 137              		.globl start
 139              	
 140              	start:
 141              	# for debug test
 142              	# zero-initialize register file
 143 0150 93000000 		addi x1, zero, 0
 144              	# x2 (sp) is initialized by reset
 145 0154 93010000 		addi x3, zero, 0
 146 0158 13020000 		addi x4, zero, 0
 147 015c 93020000 		addi x5, zero, 0
 148 0160 13030000 		addi x6, zero, 0
 149 0164 93030000 		addi x7, zero, 0
 150 0168 13040000 		addi x8, zero, 0
 151 016c 93040000 		addi x9, zero, 0
 152 0170 13050000 		addi x10, zero, 0
 153 0174 93050000 		addi x11, zero, 0
 154 0178 13060000 		addi x12, zero, 0
 155 017c 93060000 		addi x13, zero, 0
 156 0180 13070000 		addi x14, zero, 0
 157 0184 93070000 		addi x15, zero, 0
 158 0188 13080000 		addi x16, zero, 0
 159 018c 93080000 		addi x17, zero, 0
 160 0190 13090000 		addi x18, zero, 0
 161 0194 93090000 		addi x19, zero, 0
 162 0198 130A0000 		addi x20, zero, 0
 163 019c 930A0000 		addi x21, zero, 0
 164 01a0 130B0000 		addi x22, zero, 0
 165 01a4 930B0000 		addi x23, zero, 0
 166 01a8 130C0000 		addi x24, zero, 0
 167 01ac 930C0000 		addi x25, zero, 0
 168 01b0 130D0000 		addi x26, zero, 0
 169 01b4 930D0000 		addi x27, zero, 0
 170 01b8 130E0000 		addi x28, zero, 0
 171 01bc 930E0000 		addi x29, zero, 0
 172 01c0 130F0000 		addi x30, zero, 0
 173 01c4 930F0000 		addi x31, zero, 0
 174              	
 175              	# initialize control and status registers
 176 01c8 73101034 		csrw mepc,        zero
 177 01cc 73102034 		csrw mcause,      zero
 178 01d0 73100034 		csrw mscratch,    zero
 179 01d4 73103034 		csrw mtval,       zero
 180              	
 181              	#if BUILD_MODE != BUILD_BURN
 182              	# while using build_burn mode, the data section in dtcm will be set by boot loader function.
 183              	# copy data section
 184 01d8 17050000 		la a0, _sidata
 184      13050500 
 185 01e0 97050000 		la a1, _sdata
 185      93850500 
 186 01e8 17060000 		la a2, _edata
 186      13060600 
 187 01f0 63D8C500 		bge a1, a2, end_init_data
 188              	loop_init_data:
 189 01f4 1441     		lw a3, 0(a0)
 190 01f6 94C1     		sw a3, 0(a1)
 191 01f8 1105     		addi a0, a0, 4
 192 01fa 9105     		addi a1, a1, 4
 193 01fc E3CCC5FE 		blt a1, a2, loop_init_data
 194              	end_init_data:
 195              	#endif
 196              	
 197              	
 198              	# zero-init bss section
 199 0200 17050000 		la a0, _sbss
 199      13050500 
 200 0208 97050000 		la a1, _ebss
 200      93850500 
 201 0210 6357B500 		bge a0, a1, end_init_bss
 202              	loop_init_bss:
 203 0214 23200500 		sw zero, 0(a0)
 204 0218 1105     		addi a0, a0, 4
 205 021a E34DB5FE 		blt a0, a1, loop_init_bss
 206              	end_init_bss:
 207              	
 208              	
 209              	#if BUILD_MODE == BUILD_XIP
 210              	# while using build xip mode, some spi flash driver function will be moved to itcm and run there, t
 211              	# the delay function will also be moved to itcm, for more pricise delay.
 212              	# copy irqsec section
 213              		la a0, _cps_irqsec
 214              		la a1, _vsirqsec
 215              		la a2, _veirqsec
 216              	init_irqsec:
 217              		lw a3, 0(a0)
 218              		sw a3, 0(a1)
 219              		addi a0, a0, 4
 220              		addi a1, a1, 4
 221              		blt a1, a2, init_irqsec
 222              	#endif
 223              	
 224              	
 225              	# jump to main C code
 226 021e EFF03FDE 		jal ra,main
 227              	1:
 228 0222 01A0     		j 1b
 229              	
 230              		/* trap */
 231 0224 02900000 		ebreak
 231      00000000 
 231      00000000 
DEFINED SYMBOLS
      ../src/start.S:28     .text:0000000000000000 reset_vec
      ../src/start.S:140    .text:0000000000000150 start
      ../src/start.S:30     .text:0000000000000000 .L0 
      ../src/start.S:34     .text:0000000000000010 irq_vec
      ../src/start.S:39     .text:0000000000000018 .L0 
      ../src/start.S:42     .text:0000000000000020 .L0 
      ../src/start.S:44     .text:0000000000000028 .L0 
      ../src/start.S:46     .text:0000000000000030 .L0 
      ../src/start.S:48     .text:0000000000000034 .L0 
      ../src/start.S:50     .text:0000000000000036 .L0 
      ../src/start.S:51     .text:000000000000003a .L0 
      ../src/start.S:52     .text:000000000000003e .L0 
      ../src/start.S:53     .text:0000000000000042 .L0 
      ../src/start.S:54     .text:0000000000000046 .L0 
      ../src/start.S:55     .text:000000000000004a .L0 
      ../src/start.S:56     .text:000000000000004e .L0 
      ../src/start.S:57     .text:0000000000000052 .L0 
      ../src/start.S:58     .text:0000000000000056 .L0 
      ../src/start.S:59     .text:000000000000005a .L0 
      ../src/start.S:60     .text:000000000000005e .L0 
      ../src/start.S:61     .text:0000000000000062 .L0 
      ../src/start.S:62     .text:0000000000000066 .L0 
      ../src/start.S:63     .text:000000000000006a .L0 
      ../src/start.S:64     .text:000000000000006e .L0 
      ../src/start.S:65     .text:0000000000000072 .L0 
      ../src/start.S:66     .text:0000000000000076 .L0 
      ../src/start.S:67     .text:000000000000007a .L0 
      ../src/start.S:68     .text:000000000000007e .L0 
      ../src/start.S:69     .text:0000000000000082 .L0 
      ../src/start.S:70     .text:0000000000000086 .L0 
      ../src/start.S:71     .text:000000000000008a .L0 
      ../src/start.S:72     .text:000000000000008e .L0 
      ../src/start.S:73     .text:0000000000000092 .L0 
      ../src/start.S:74     .text:0000000000000096 .L0 
      ../src/start.S:75     .text:000000000000009a .L0 
      ../src/start.S:76     .text:000000000000009e .L0 
      ../src/start.S:77     .text:00000000000000a2 .L0 
      ../src/start.S:78     .text:00000000000000a6 .L0 
      ../src/start.S:82     .text:00000000000000aa .L0 
      ../src/start.S:88     .text:00000000000000b0 .L0 
      ../src/start.S:92     .text:00000000000000b4 .L0 
      ../src/start.S:94     .text:00000000000000b8 .L0 
      ../src/start.S:97     .text:00000000000000c0 .L0 
      ../src/start.S:100    .text:00000000000000c8 .L0 
      ../src/start.S:103    .text:00000000000000d0 .L0 
      ../src/start.S:104    .text:00000000000000d4 .L0 
      ../src/start.S:105    .text:00000000000000d8 .L0 
      ../src/start.S:106    .text:00000000000000dc .L0 
      ../src/start.S:107    .text:00000000000000e0 .L0 
      ../src/start.S:108    .text:00000000000000e4 .L0 
      ../src/start.S:109    .text:00000000000000e8 .L0 
      ../src/start.S:110    .text:00000000000000ec .L0 
      ../src/start.S:111    .text:00000000000000f0 .L0 
      ../src/start.S:112    .text:00000000000000f4 .L0 
      ../src/start.S:113    .text:00000000000000f8 .L0 
      ../src/start.S:114    .text:00000000000000fc .L0 
      ../src/start.S:115    .text:0000000000000100 .L0 
      ../src/start.S:116    .text:0000000000000104 .L0 
      ../src/start.S:117    .text:0000000000000108 .L0 
      ../src/start.S:118    .text:000000000000010c .L0 
      ../src/start.S:119    .text:0000000000000110 .L0 
      ../src/start.S:120    .text:0000000000000114 .L0 
      ../src/start.S:121    .text:0000000000000118 .L0 
      ../src/start.S:122    .text:000000000000011c .L0 
      ../src/start.S:123    .text:0000000000000120 .L0 
      ../src/start.S:124    .text:0000000000000124 .L0 
      ../src/start.S:125    .text:0000000000000128 .L0 
      ../src/start.S:126    .text:000000000000012c .L0 
      ../src/start.S:127    .text:0000000000000130 .L0 
      ../src/start.S:128    .text:0000000000000134 .L0 
      ../src/start.S:129    .text:0000000000000138 .L0 
      ../src/start.S:130    .text:000000000000013c .L0 
      ../src/start.S:131    .text:0000000000000140 .L0 
      ../src/start.S:135    .text:000000000000014c .L0 
      ../src/start.S:143    .text:0000000000000150 .L0 
      ../src/start.S:145    .text:0000000000000154 .L0 
      ../src/start.S:146    .text:0000000000000158 .L0 
      ../src/start.S:147    .text:000000000000015c .L0 
      ../src/start.S:148    .text:0000000000000160 .L0 
      ../src/start.S:149    .text:0000000000000164 .L0 
      ../src/start.S:150    .text:0000000000000168 .L0 
      ../src/start.S:151    .text:000000000000016c .L0 
      ../src/start.S:152    .text:0000000000000170 .L0 
      ../src/start.S:153    .text:0000000000000174 .L0 
      ../src/start.S:154    .text:0000000000000178 .L0 
      ../src/start.S:155    .text:000000000000017c .L0 
      ../src/start.S:156    .text:0000000000000180 .L0 
      ../src/start.S:157    .text:0000000000000184 .L0 
      ../src/start.S:158    .text:0000000000000188 .L0 
      ../src/start.S:159    .text:000000000000018c .L0 
      ../src/start.S:160    .text:0000000000000190 .L0 
      ../src/start.S:161    .text:0000000000000194 .L0 
      ../src/start.S:162    .text:0000000000000198 .L0 
      ../src/start.S:163    .text:000000000000019c .L0 
      ../src/start.S:164    .text:00000000000001a0 .L0 
      ../src/start.S:165    .text:00000000000001a4 .L0 
      ../src/start.S:166    .text:00000000000001a8 .L0 
      ../src/start.S:167    .text:00000000000001ac .L0 
      ../src/start.S:168    .text:00000000000001b0 .L0 
      ../src/start.S:169    .text:00000000000001b4 .L0 
      ../src/start.S:170    .text:00000000000001b8 .L0 
      ../src/start.S:171    .text:00000000000001bc .L0 
      ../src/start.S:172    .text:00000000000001c0 .L0 
      ../src/start.S:173    .text:00000000000001c4 .L0 
      ../src/start.S:176    .text:00000000000001c8 .L0 
      ../src/start.S:177    .text:00000000000001cc .L0 
      ../src/start.S:178    .text:00000000000001d0 .L0 
      ../src/start.S:179    .text:00000000000001d4 .L0 
      ../src/start.S:184    .text:00000000000001d8 .L0 
      ../src/start.S:185    .text:00000000000001e0 .L0 
      ../src/start.S:186    .text:00000000000001e8 .L0 
      ../src/start.S:194    .text:0000000000000200 end_init_data
      ../src/start.S:187    .text:00000000000001f0 .L0 
      ../src/start.S:188    .text:00000000000001f4 loop_init_data
      ../src/start.S:189    .text:00000000000001f4 .L0 
      ../src/start.S:190    .text:00000000000001f6 .L0 
      ../src/start.S:191    .text:00000000000001f8 .L0 
      ../src/start.S:192    .text:00000000000001fa .L0 
      ../src/start.S:193    .text:00000000000001fc .L0 
      ../src/start.S:199    .text:0000000000000200 .L0 
      ../src/start.S:200    .text:0000000000000208 .L0 
      ../src/start.S:206    .text:000000000000021e end_init_bss
      ../src/start.S:201    .text:0000000000000210 .L0 
      ../src/start.S:202    .text:0000000000000214 loop_init_bss
      ../src/start.S:203    .text:0000000000000214 .L0 
      ../src/start.S:204    .text:0000000000000218 .L0 
      ../src/start.S:205    .text:000000000000021a .L0 
      ../src/start.S:226    .text:000000000000021e .L0 
      ../src/start.S:228    .text:0000000000000222 .L0 
      ../src/start.S:231    .text:0000000000000224 .L0 
      ../src/start.S:231    .text:0000000000000226 .L0 
                            .text:0000000000000000 .L0 
      ../src/start.S:231    .text:0000000000000226 .L0 
                       .debug_str:0000000000000000 .L0 
                       .debug_str:000000000000000f .L0 
                       .debug_str:0000000000000034 .L0 
      ../src/start.S:184    .text:00000000000001d8 .L0 
      ../src/start.S:185    .text:00000000000001e0 .L0 
      ../src/start.S:186    .text:00000000000001e8 .L0 
      ../src/start.S:199    .text:0000000000000200 .L0 
      ../src/start.S:200    .text:0000000000000208 .L0 
      ../src/start.S:227    .text:0000000000000222 .L11

UNDEFINED SYMBOLS
irq
return_from_irq
_sidata
_sdata
_edata
_sbss
_ebss
main
